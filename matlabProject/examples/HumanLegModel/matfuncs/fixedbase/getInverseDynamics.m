function jointTorq = getInverseDynamics(in1,in2,in3)
%GETINVERSEDYNAMICS
%    JOINTTORQ = GETINVERSEDYNAMICS(IN1,IN2,IN3)

%    This function was generated by the Symbolic Math Toolbox version 8.0.
%    02-Oct-2018 03:32:42

%======================================================================%
% Description: This function gives the inverse(backward) dynamics of robot
% jointTorq = getInverseDynamics([M, C, G], states, accelerations)
% @Inputs:
% M: Inertia matrix of the dynamical system
% C: Coriolis matrix of the dynamical system
% G: Gravity matrix of the dynamical system
% states: State variable of the dynamical system - column vector
% accelerations: Accelerations of the dynamical system - column vector
% @Output:
% jointTorq: Torques of joint variables of the dynamical system
% Version: 1.0
% Author: Quoc-Viet Dang
%======================================================================%
C1_1 = in1(10);
C1_2 = in1(13);
C1_3 = in1(16);
C2_1 = in1(11);
C2_2 = in1(14);
C2_3 = in1(17);
C3_1 = in1(12);
C3_2 = in1(15);
C3_3 = in1(18);
G1 = in1(19);
G2 = in1(20);
G3 = in1(21);
M1_1 = in1(1);
M1_2 = in1(4);
M1_3 = in1(7);
M2_1 = in1(2);
M2_2 = in1(5);
M2_3 = in1(8);
M3_1 = in1(3);
M3_2 = in1(6);
M3_3 = in1(9);
d2q11 = in3(1,:);
d2q12 = in3(2,:);
d2q13 = in3(3,:);
dq11 = in2(4,:);
dq12 = in2(5,:);
dq13 = in2(6,:);
jointTorq = [G1+C1_1.*dq11+C1_2.*dq12+C1_3.*dq13+M1_1.*d2q11+M1_2.*d2q12+M1_3.*d2q13;G2+C2_1.*dq11+C2_2.*dq12+C2_3.*dq13+M2_1.*d2q11+M2_2.*d2q12+M2_3.*d2q13;G3+C3_1.*dq11+C3_2.*dq12+C3_3.*dq13+M3_1.*d2q11+M3_2.*d2q12+M3_3.*d2q13];
